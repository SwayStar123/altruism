/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category ClaimWithdrawal
 * @category generated
 */
export const claimWithdrawalStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */;
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'ClaimWithdrawalInstructionArgs',
);
/**
 * Accounts required by the _claimWithdrawal_ instruction
 *
 * @property [_writable_, **signer**] authority
 * @property [_writable_] vault
 * @property [] globalSolVault
 * @property [_writable_] beneficiary
 * @property [_writable_] mState
 * @property [_writable_] reservePda
 * @property [_writable_] ticketAccount
 * @property [_writable_] solVault
 * @property [] clock
 * @property [] marinadeFinanceProgram
 * @category Instructions
 * @category ClaimWithdrawal
 * @category generated
 */
export type ClaimWithdrawalInstructionAccounts = {
  authority: web3.PublicKey;
  vault: web3.PublicKey;
  globalSolVault: web3.PublicKey;
  beneficiary: web3.PublicKey;
  rent?: web3.PublicKey;
  mState: web3.PublicKey;
  reservePda: web3.PublicKey;
  ticketAccount: web3.PublicKey;
  solVault: web3.PublicKey;
  clock: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  marinadeFinanceProgram: web3.PublicKey;
};

export const claimWithdrawalInstructionDiscriminator = [118, 206, 173, 38, 239, 165, 65, 30];

/**
 * Creates a _ClaimWithdrawal_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category ClaimWithdrawal
 * @category generated
 */
export function createClaimWithdrawalInstruction(
  accounts: ClaimWithdrawalInstructionAccounts,
  programId = new web3.PublicKey('A1tru1e86JujDZ1jP2yaoCHegVj8SvMzSP2yhRFDQgTR'),
) {
  const [data] = claimWithdrawalStruct.serialize({
    instructionDiscriminator: claimWithdrawalInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.globalSolVault,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.beneficiary,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.mState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.reservePda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.ticketAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.solVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.clock,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.marinadeFinanceProgram,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
