/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category UnstakeDonation
 * @category generated
 */
export const unstakeDonationStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */;
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'UnstakeDonationInstructionArgs',
);
/**
 * Accounts required by the _unstakeDonation_ instruction
 *
 * @property [] state
 * @property [_writable_] token
 * @property [_writable_] mint
 * @property [_writable_] vault
 * @property [_writable_] beneficiary
 * @property [_writable_] mState
 * @property [_writable_] msolMint
 * @property [_writable_] burnMsolFrom
 * @property [_writable_] newTicketAccount
 * @property [] clock
 * @property [] marinadeFinanceProgram
 * @category Instructions
 * @category UnstakeDonation
 * @category generated
 */
export type UnstakeDonationInstructionAccounts = {
  state: web3.PublicKey;
  token: web3.PublicKey;
  mint: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
  vault: web3.PublicKey;
  beneficiary: web3.PublicKey;
  mState: web3.PublicKey;
  msolMint: web3.PublicKey;
  burnMsolFrom: web3.PublicKey;
  newTicketAccount: web3.PublicKey;
  clock: web3.PublicKey;
  rent?: web3.PublicKey;
  marinadeFinanceProgram: web3.PublicKey;
};

export const unstakeDonationInstructionDiscriminator = [127, 218, 25, 147, 159, 250, 180, 235];

/**
 * Creates a _UnstakeDonation_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category UnstakeDonation
 * @category generated
 */
export function createUnstakeDonationInstruction(
  accounts: UnstakeDonationInstructionAccounts,
  programId = new web3.PublicKey('A1tru1e86JujDZ1jP2yaoCHegVj8SvMzSP2yhRFDQgTR'),
) {
  const [data] = unstakeDonationStruct.serialize({
    instructionDiscriminator: unstakeDonationInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.state,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.token,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.beneficiary,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.msolMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.burnMsolFrom,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.newTicketAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.clock,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.marinadeFinanceProgram,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
