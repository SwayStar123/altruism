/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';

/**
 * Arguments used to create {@link Beneficiary}
 * @category Accounts
 * @category generated
 */
export type BeneficiaryArgs = {
  solAmount: beet.bignum;
};

export const beneficiaryDiscriminator = [45, 182, 224, 198, 197, 255, 233, 33];
/**
 * Holds the data for the {@link Beneficiary} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Beneficiary implements BeneficiaryArgs {
  private constructor(readonly solAmount: beet.bignum) {}

  /**
   * Creates a {@link Beneficiary} instance from the provided args.
   */
  static fromArgs(args: BeneficiaryArgs) {
    return new Beneficiary(args.solAmount);
  }

  /**
   * Deserializes the {@link Beneficiary} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset = 0): [Beneficiary, number] {
    return Beneficiary.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Beneficiary} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
  ): Promise<Beneficiary> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find Beneficiary account at ${address}`);
    }
    return Beneficiary.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey('A1tru1e86JujDZ1jP2yaoCHegVj8SvMzSP2yhRFDQgTR'),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, beneficiaryBeet);
  }

  /**
   * Deserializes the {@link Beneficiary} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Beneficiary, number] {
    return beneficiaryBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link Beneficiary} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return beneficiaryBeet.serialize({
      accountDiscriminator: beneficiaryDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Beneficiary}
   */
  static get byteSize() {
    return beneficiaryBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Beneficiary} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(Beneficiary.byteSize, commitment);
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link Beneficiary} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === Beneficiary.byteSize;
  }

  /**
   * Returns a readable version of {@link Beneficiary} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      solAmount: (() => {
        const x = <{ toNumber: () => number }>this.solAmount;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const beneficiaryBeet = new beet.BeetStruct<
  Beneficiary,
  BeneficiaryArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['solAmount', beet.u64],
  ],
  Beneficiary.fromArgs,
  'Beneficiary',
);
